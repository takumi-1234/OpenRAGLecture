# Dockerfile.batch

# --- Stage 1: Builder ---
# Goのソースコードをコンパイルするためのステージ
FROM golang:1.25-alpine AS builder

# build-base と git をインストール
RUN apk add --no-cache build-base git

WORKDIR /app

# 依存関係の解決
# go.mod と go.sum を先にコピーして、依存関係をキャッシュしやすくする
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
# `go build` に必要なすべてのソースコードをコピー
COPY . .

# バッチアプリケーションのビルド
# 出力名を batch-main など、apiサーバーと区別できる名前にする
RUN CGO_ENABLED=0 GOOS=linux go build -o /app/batch-main ./cmd/batch

# --- Stage 2: Final Image ---
# ビルドされたバッチバイナリを実行するための軽量なステージ
FROM alpine:latest AS final

RUN apk add --no-cache tzdata ca-certificates

WORKDIR /app

# ビルダーからコンパイル済みのバイナリのみをコピー
COPY --from=builder /app/batch-main .

# 設定ファイルをコピー
COPY configs/ /app/configs/

# デフォルトのエントリーポイントとしてバイナリを指定
# 実行するタスクは docker compose run で引数として渡される
ENTRYPOINT ["/app/batch-main"]