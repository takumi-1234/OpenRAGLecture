# docker-compose.yml

services:
  # 1. MySQL Database Service
  db:
    image: mysql:8.0
    container_name: openrag-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-open_rag_lecture}
      MYSQL_USER: ${MYSQL_USER:-user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
    ports:
      - "${MYSQL_HOST_PORT:-3406}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - openrag-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 2. Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: openrag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - openrag-network

  # 3. Qdrant Vector Database Service
  qdrant:
    image: qdrant/qdrant:v1.9.0
    container_name: openrag-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333" # REST
      - "6334:6334" # gRPC
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - openrag-network

  # 4. Go API Server Service
  api:
    container_name: openrag-api
    build:
      context: .
      dockerfile: Dockerfile
      target: debug
    restart: unless-stopped
    ports:
      - "${API_HOST_PORT:-8180}:8180"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
    environment:
      - SERVER_MODE=debug
      - DATABASE_MYSQL_HOST=db
      - DATABASE_MYSQL_PORT=3306
      - DATABASE_MYSQL_USER=${MYSQL_USER:-user}
      - DATABASE_MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - DATABASE_MYSQL_DBNAME=${MYSQL_DATABASE:-open_rag_lecture}
      - CACHE_REDIS_HOST=redis
      - CACHE_REDIS_PORT=6379
      - VECTORDB_QDRANT_HOST=qdrant
      # ★★★ 削除: GOOGLE_API_KEY ★★★
      # - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # ★★★ 追加: サービスアカウント認証用の環境変数 ★★★
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      - GOOGLE_LOCATION=${GOOGLE_LOCATION:-us-central1}
    volumes:
      - .:/app
      # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
      # 修正点: サービスアカウントキーファイルをコンテナ内に読み取り専用でマウント
      # .envのHOST_GCP_CREDENTIALS_PATH変数を参照します
      # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
      - ${HOST_GCP_CREDENTIALS_PATH}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - ./uploads:/app/uploads
      - ./tmp:/app/tmp
    networks:
      - openrag-network

  # 5. Go Batch Service
  batch:
    container_name: openrag-batch
    build:
      context: .
      dockerfile: Dockerfile.batch
    profiles:
      - batch
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
    environment:
      - SERVER_MODE=debug
      - DATABASE_MYSQL_HOST=db
      - DATABASE_MYSQL_PORT=3306
      - DATABASE_MYSQL_USER=${MYSQL_USER:-user}
      - DATABASE_MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - DATABASE_MYSQL_DBNAME=${MYSQL_DATABASE:-open_rag_lecture}
      - VECTORDB_QDRANT_HOST=qdrant
      # ★★★ 削除: GOOGLE_API_KEY ★★★
      # - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # ★★★ 追加: サービスアカウント認証用の環境変数 ★★★
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      - GOOGLE_LOCATION=${GOOGLE_LOCATION:-us-central1}
    volumes:
      # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
      # 修正点: サービスアカウントキーファイルをコンテナ内に読み取り専用でマウント
      # .envのHOST_GCP_CREDENTIALS_PATH変数を参照します
      # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
      - ${HOST_GCP_CREDENTIALS_PATH}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - ./uploads:/app/uploads
    networks:
      - openrag-network

volumes:
  mysql-data:
  qdrant-data:

networks:
  openrag-network:
    driver: bridge